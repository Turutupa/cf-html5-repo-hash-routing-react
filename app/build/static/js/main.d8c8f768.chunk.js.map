{"version":3,"sources":["serviceWorker.js","store/store.js","DefaultComponent.js","index.js","store/reducers.js"],"names":["Boolean","window","location","hostname","match","history","createHashHistory","hashType","getUserConfirmation","message","callback","confirm","DefaultComponent","props","dispatch","useDispatch","onClick","r","redirect","push","name","store","preloadedState","createStore","combineReducers","router","connectRouter","compose","applyMiddleware","routerMiddleware","configureStore","ReactDOM","render","exact","path","to","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console"],"mappings":"8MAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,iDCbOC,EAAUC,YAAkB,CACvCC,SAAU,QACVC,oBAAqB,SAACC,EAASC,GAAV,OAAuBA,EAAST,OAAOU,QAAQF,O,WCavDG,MAhBf,SAA0BC,GACxB,IAAMC,EAAWC,cAMjB,OACE,6BACE,4BAAQC,QAAS,kBANEC,EAMkBJ,EAAMK,cAL7CJ,EAASK,YAAKF,IADhB,IAAuBA,IAOhBJ,EAAMO,QCDTC,EFHS,SAAwBC,GACrC,IGPcjB,EHkBd,OAXckB,aGPAlB,EHQMA,EGPpBmB,YAAgB,CACdC,OAAQC,YAAcrB,MHOtBiB,EACAK,YACEC,YACEC,YAAiBxB,MEHXyB,GAEdC,IAASC,OACP,kBAAC,IAAD,CAAUX,MAAOA,GAEf,kBAAC,IAAD,CAAiBhB,QAASA,GACxB,oCAEE,kBAAC,IAAD,KACE,kBAAC,IAAD,CACE4B,OAAK,EACLC,KAAK,cACLF,OAAQ,kBACN,kBAAC,EAAD,CAAkBZ,KAAK,QAAQF,SAAS,wBAG5C,kBAAC,IAAD,CACEgB,KAAK,mBACLF,OAAQ,kBACN,kBAAC,EAAD,CAAkBZ,KAAK,OAAOF,SAAS,mBAG3C,kBAAC,IAAD,CAAOgB,KAAK,IAAIF,OAAQ,kBAAM,kBAAC,IAAD,CAAUG,GAAG,uBAKnDC,SAASC,eAAe,SH2FpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAMpC,c","file":"static/js/main.d8c8f768.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createHashHistory } from 'history';\nimport { applyMiddleware, compose, createStore } from 'redux';\nimport { routerMiddleware } from 'connected-react-router';\nimport createRootReducer from './reducers';\n\nexport const history = createHashHistory({\n  hashType: 'slash',\n  getUserConfirmation: (message, callback) => callback(window.confirm(message)),\n});\n\nexport default function configureStore(preloadedState) {\n  const store = createStore(\n    createRootReducer(history), // root reducer with router state\n    preloadedState,\n    compose(\n      applyMiddleware(\n        routerMiddleware(history) // for dispatching history actions\n        // ... other middlewares ...\n      )\n    )\n  );\n\n  return store;\n}\n","import React from 'react';\nimport { useDispatch } from 'react-redux';\nimport { push } from 'connected-react-router';\n\nfunction DefaultComponent(props) {\n  const dispatch = useDispatch();\n\n  function handleRouting(r) {\n    dispatch(push(r));\n  }\n\n  return (\n    <div>\n      <button onClick={() => handleRouting(props.redirect)}>\n        {props.name}\n      </button>\n    </div>\n  );\n}\n\nexport default DefaultComponent;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\n\nimport { Provider } from 'react-redux';\nimport { Route, Switch } from 'react-router'; // react-router v4/v5\nimport { ConnectedRouter } from 'connected-react-router';\nimport configureStore, { history } from './store/store';\nimport { Redirect } from 'react-router-dom';\n\nimport DefaultComponent from './DefaultComponent';\n\nconst store = configureStore(/* provide initial state if any */);\n\nReactDOM.render(\n  <Provider store={store}>\n    {/* place ConnectedRouter under Provider */}\n    <ConnectedRouter history={history}>\n      <>\n        {/* your usual react-router v4/v5 routing */}\n        <Switch>\n          <Route\n            exact\n            path='/index.html'\n            render={() => (\n              <DefaultComponent name='Match' redirect='/miss/index.html' />\n            )}\n          />\n          <Route\n            path='/miss/index.html'\n            render={() => (\n              <DefaultComponent name='Miss' redirect='/index.html' />\n            )}\n          />\n          <Route path='*' render={() => <Redirect to='/index.html' />} />\n        </Switch>\n      </>\n    </ConnectedRouter>\n  </Provider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","// reducers.js\nimport { combineReducers } from 'redux';\nimport { connectRouter } from 'connected-react-router';\n\nexport default (history) =>\n  combineReducers({\n    router: connectRouter(history),\n    // ... rest of reducers\n  });\n"],"sourceRoot":""}